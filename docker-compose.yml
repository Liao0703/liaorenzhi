version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: learning-platform-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-learning_platform}
      MYSQL_USER: ${MYSQL_USER:-app_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-apppassword}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: learning-platform-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      timeout: 3s
      retries: 5
      interval: 10s
      start_period: 10s

  # 后端API服务
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: learning-platform-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${MYSQL_DATABASE:-learning_platform}
      DB_USER: ${MYSQL_USER:-app_user}
      DB_PASSWORD: ${MYSQL_PASSWORD:-apppassword}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      # 邮件配置
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      SMTP_FROM: ${SMTP_FROM:-system@learning-platform.com}
      # 告警Webhook
      ALERT_WEBHOOK_URL: ${ALERT_WEBHOOK_URL:-}
      # Ali OSS配置
      OSS_REGION: ${OSS_REGION:-}
      OSS_ACCESS_KEY_ID: ${OSS_ACCESS_KEY_ID:-}
      OSS_ACCESS_KEY_SECRET: ${OSS_ACCESS_KEY_SECRET:-}
      OSS_BUCKET: ${OSS_BUCKET:-}
    ports:
      - "3001:3001"
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 40s

  # 前端Web服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: learning-platform-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - app-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 10s

volumes:
  mysql_data:
    name: learning-platform-mysql-data
  redis_data:
    name: learning-platform-redis-data
  uploads_data:
    name: learning-platform-uploads
  logs_data:
    name: learning-platform-logs

networks:
  app-network:
    name: learning-platform-network
    driver: bridge
